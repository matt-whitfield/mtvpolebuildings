---
// Define the props interface for the component
interface Props {
  title?: string;
  subtitle?: string;
  buttonText?: string;
  buttonUrl?: string;
  images?: { src: string; alt: string }[];
}

// Destructure the props with default values
const {
  title = "Work Gallery",
  subtitle = "Explore our recent pole building projects",
  buttonText = "View All Work",
  buttonUrl = "/work",
  images = [
    {
      src: '/images/workGallery/optimized/mtvpb old photos-10.webp',
      alt: 'A backyard deck.'
    },
    {
      src: '/images/workGallery/optimized/mtvpb old photos-2.webp',
      alt: 'Early days. This escavator was used to dig the holes, and then raise the poles.'
    },
    {
      src: '/images/workGallery/optimized/mtvpb old photos-7.webp',
      alt: 'An outdoor barn built in the early 2000s.'
    },
    {
      src: '/images/workGallery/optimized/mtvpb_9-4.webp',
      alt: 'One of our recent pole building projects. Seen here without the garage door installed.'
    },
    {
      src: '/images/workGallery/optimized/mtvpb_9-7.webp',
      alt: 'Another gorgeous custom pole building. We love what we do. This one was constructed in 2023'
    },
    {
      src: '/images/workGallery/optimized/mtvpb_9-8.webp',
      alt: 'This custom pole building features stainless steel siding that we think looks real nice. Finished in 2023.'
    }
  ]
} = Astro.props;
---

<section class="work-gallery py-16 gradient-section-1 section-padding">
  <div class="container mx-auto px-4">
    <!-- Header Section -->
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-800 mb-4 scroll-animate slide-right">{title}</h2>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto scroll-animate slide-up">{subtitle}</p>
    </div>

    <!-- Carousel Container -->
    <div class="work-carousel-container relative max-w-5xl mx-auto mb-8 scroll-animate fade-in">
      <!-- Navigation Arrows -->
      <button 
        id="work-prev-btn" 
        class="absolute left-4 top-1/2 transform -translate-y-1/2 z-10 bg-white/90 hover:bg-white text-gray-800 rounded p-3 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110"
        aria-label="Previous image"
      >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
        </svg>
      </button>
      
      <button 
        id="work-next-btn" 
        class="absolute right-4 top-1/2 transform -translate-y-1/2 z-10 bg-white/90 hover:bg-white text-gray-800 rounded p-3 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110"
        aria-label="Next image"
      >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
        </svg>
      </button>

      <!-- Carousel Track -->
      <div class="work-carousel-track-container overflow-hidden rounded">
        <div id="work-carousel-track" class="work-carousel-track flex transition-transform duration-500 ease-out">
          {images.map((image, index) => (
            <div 
              class="work-carousel-slide flex-shrink-0 w-full relative cursor-pointer group" 
              data-index={index}
            >
              <div class="aspect-video w-full overflow-hidden bg-gray-100">
                <img 
                  src={image.src} 
                  alt={image.alt} 
                  width="800"
                  height="450"
                  class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"
                  loading={index === 0 ? "eager" : "lazy"}
                />
              </div>
              <!-- Image overlay on hover -->
              <div class="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300 flex items-center justify-center">
                <div class="opacity-0 group-hover:opacity-100 transition-opacity duration-300 text-white text-lg font-semibold bg-black/50 px-4 py-2 rounded">
                  Click to view
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>

    <!-- Thumbnail Navigation -->
    <div class="flex justify-center mb-8 px-4">
      <div class="flex space-x-3 overflow-x-auto max-w-full py-3 px-2">
        {images.map((image, index) => (
          <button 
            class="work-thumbnail flex-shrink-0 w-16 h-16 md:w-20 md:h-20 rounded overflow-hidden transition-all duration-300 hover:scale-105 border-2 border-transparent"
            data-index={index}
            aria-label={`View image ${index + 1}`}
          >
            <img 
              src={image.src} 
              alt={image.alt} 
              width="80"
              height="80"
              class="w-full h-full object-cover"
              loading="lazy"
            />
          </button>
        ))}
      </div>
    </div>

    <!-- CTA Button -->
    <div class="text-center scroll-animate fade-in-delay">
      <a href={buttonUrl} class="btn-primary inline-block">
        {buttonText}
      </a>
    </div>
  </div>
</section>

<!-- Lightbox Modal for Work Gallery Images -->
<div id="work-lightbox" class="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center hidden">
  <button id="close-work-lightbox" class="absolute top-6 right-6 text-white text-4xl hover:text-gray-300 z-10">&times;</button>
  <button id="prev-work-image" class="absolute left-6 text-white text-4xl hover:text-gray-300 z-10">&larr;</button>
  <button id="next-work-image" class="absolute right-6 text-white text-4xl hover:text-gray-300 z-10">&rarr;</button>
  <div class="max-w-6xl max-h-[90vh] mx-auto px-4">
    <img id="lightbox-work-image" src="" alt="" class="max-h-[90vh] max-w-full mx-auto rounded shadow-2xl">
    <p id="work-image-caption" class="text-white text-center mt-4 text-lg"></p>
    <div class="text-center mt-2">
      <span id="work-image-counter" class="text-gray-300 text-sm"></span>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', async () => {
  // Import shared utilities with fallback for browsers that don't support dynamic imports
  try {
    const [{ initScrollAnimations }, { LightboxGallery, Carousel }] = await Promise.all([
      import('/src/utils/scroll-animations.js'),
      import('/src/utils/gallery-utils.js')
    ]);

    // Initialize scroll animations
    initScrollAnimations();

    // Extract images data from slides
    const slides = document.querySelectorAll('.work-carousel-slide');
    const images = Array.from(slides).map(slide => {
      const img = slide.querySelector('img');
      return img ? { src: img.src, alt: img.alt } : null;
    }).filter(Boolean);

    // Initialize carousel
    const carousel = new Carousel({
      trackId: 'work-carousel-track',
      prevButtonId: 'work-prev-btn',
      nextButtonId: 'work-next-btn',
      thumbnailSelector: '.work-thumbnail',
      slideSelector: '.work-carousel-slide'
    });

    // Initialize lightbox with manual binding (don't use gallerySelector)
    const lightbox = new LightboxGallery({
      lightboxId: 'work-lightbox',
      lightboxImageId: 'lightbox-work-image',
      imageCaptionId: 'work-image-caption',
      counterId: 'work-image-counter',
      closeButtonId: 'close-work-lightbox',
      prevButtonId: 'prev-work-image',
      nextButtonId: 'next-work-image',
      images: images
    });

    console.log('WorkGallery: Lightbox initialized with', images.length, 'images');

    // Bind carousel slides to lightbox
    slides.forEach((slide, index) => {
      slide.addEventListener('click', () => {
        console.log('WorkGallery: Opening lightbox at index', index);
        lightbox.open(index);
      });
    });

    // Sync thumbnail clicks with lightbox
    const thumbnails = document.querySelectorAll('.work-thumbnail');
    thumbnails.forEach((thumb, index) => {
      thumb.addEventListener('click', () => {
        carousel.goToSlide(index);
        lightbox.open(index);
      });
    });

  } catch (error) {
    console.warn('Failed to load optimized gallery utilities, falling back to inline implementation', error);
    // Fallback implementation would go here if needed
  }
});
</script>