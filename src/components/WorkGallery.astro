---
// Define the props interface for the component
interface Props {
  title?: string;
  subtitle?: string;
  buttonText?: string;
  buttonUrl?: string;
  images?: { src: string; alt: string }[];
}

// Destructure the props with default values
const {
  title = "Work Gallery",
  subtitle = "Explore our recent pole building projects",
  buttonText = "View All Work",
  buttonUrl = "/work",
  images = [
    {
      src: '/images/workGallery/mtvpb old photos-10.webp',
      alt: 'A backyard deck.'
    },
    {
      src: '/images/workGallery/mtvpb old photos-2.webp',
      alt: 'Early days. This escavator was used to dig the holes, and then raise the poles.'
    },
    {
      src: '/images/workGallery/mtvpb old photos-7.webp',
      alt: 'An outdoor barn built in the early 2000s.'
    },
    {
      src: '/images/workGallery/mtvpb_9-4.webp',
      alt: 'One of our recent pole building projects. Seen here without the garage door installed.'
    },
    {
      src: '/images/workGallery/mtvpb_9-7.webp',
      alt: 'Another gorgeous custom pole building. We love what we do. This one was constructed in 2023'
    },
    {
      src: '/images/workGallery/mtvpb_9-8.webp',
      alt: 'This custom pole building features stainless steel siding that we think looks real nice. Finished in 2023.'
    }
  ]
} = Astro.props;
---

<section class="work-gallery py-16 gradient-section-1 section-padding">
  <div class="container mx-auto px-4">
    <!-- Header Section -->
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-800 mb-4 scroll-animate slide-right">{title}</h2>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto scroll-animate slide-up">{subtitle}</p>
    </div>

    <!-- Carousel Container -->
    <div class="work-carousel-container relative max-w-5xl mx-auto mb-8 scroll-animate fade-in">
      <!-- Navigation Arrows -->
      <button 
        id="work-prev-btn" 
        class="absolute left-4 top-1/2 transform -translate-y-1/2 z-10 bg-white/90 hover:bg-white text-gray-800 rounded p-3 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110"
        aria-label="Previous image"
      >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
        </svg>
      </button>
      
      <button 
        id="work-next-btn" 
        class="absolute right-4 top-1/2 transform -translate-y-1/2 z-10 bg-white/90 hover:bg-white text-gray-800 rounded p-3 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110"
        aria-label="Next image"
      >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
        </svg>
      </button>

      <!-- Carousel Track -->
      <div class="work-carousel-track-container overflow-hidden rounded">
        <div id="work-carousel-track" class="work-carousel-track flex transition-transform duration-500 ease-out">
          {images.map((image, index) => (
            <div 
              class="work-carousel-slide flex-shrink-0 w-full relative cursor-pointer group" 
              data-index={index}
            >
              <div class="aspect-video w-full overflow-hidden bg-gray-100">
                <img 
                  src={image.src} 
                  alt={image.alt} 
                  class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"
                  loading={index === 0 ? "eager" : "lazy"}
                />
              </div>
              <!-- Image overlay on hover -->
              <div class="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300 flex items-center justify-center">
                <div class="opacity-0 group-hover:opacity-100 transition-opacity duration-300 text-white text-lg font-semibold bg-black/50 px-4 py-2 rounded">
                  Click to view
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>

    <!-- Thumbnail Navigation -->
    <div class="flex justify-center mb-8 px-4">
      <div class="flex space-x-3 overflow-x-auto max-w-full py-3 px-2">
        {images.map((image, index) => (
          <button 
            class="work-thumbnail flex-shrink-0 w-16 h-16 md:w-20 md:h-20 rounded overflow-hidden transition-all duration-300 hover:scale-105 border-2 border-transparent"
            data-index={index}
            aria-label={`View image ${index + 1}`}
          >
            <img 
              src={image.src} 
              alt={image.alt} 
              class="w-full h-full object-cover"
              loading="lazy"
            />
          </button>
        ))}
      </div>
    </div>

    <!-- CTA Button -->
    <div class="text-center scroll-animate fade-in-delay">
      <a href={buttonUrl} class="btn-primary inline-block">
        {buttonText}
      </a>
    </div>
  </div>
</section>

<!-- Lightbox Modal for Work Gallery Images -->
<div id="work-lightbox" class="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center hidden">
  <button id="close-work-lightbox" class="absolute top-6 right-6 text-white text-4xl hover:text-gray-300 z-10">&times;</button>
  <button id="prev-work-image" class="absolute left-6 text-white text-4xl hover:text-gray-300 z-10">&larr;</button>
  <button id="next-work-image" class="absolute right-6 text-white text-4xl hover:text-gray-300 z-10">&rarr;</button>
  <div class="max-w-6xl max-h-[90vh] mx-auto px-4">
    <img id="lightbox-work-image" src="" alt="" class="max-h-[90vh] max-w-full mx-auto rounded shadow-2xl">
    <p id="work-image-caption" class="text-white text-center mt-4 text-lg"></p>
    <div class="text-center mt-2">
      <span id="work-image-counter" class="text-gray-300 text-sm"></span>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  // Carousel elements
  const carousel = document.getElementById('work-carousel-track');
  const slides = document.querySelectorAll('.work-carousel-slide');
  const thumbnails = document.querySelectorAll('.work-thumbnail');
  const prevBtn = document.getElementById('work-prev-btn');
  const nextBtn = document.getElementById('work-next-btn');
  
  // Lightbox elements
  const lightbox = document.getElementById('work-lightbox');
  const lightboxImage = document.getElementById('lightbox-work-image') as HTMLImageElement | null;
  const imageCaption = document.getElementById('work-image-caption');
  const imageCounter = document.getElementById('work-image-counter');
  const closeButton = document.getElementById('close-work-lightbox');
  const prevLightboxButton = document.getElementById('prev-work-image');
  const nextLightboxButton = document.getElementById('next-work-image');
  
  // Extract images data from slides
  const images: {src: string; alt: string}[] = [];
  slides.forEach(slide => {
    const imgElement = slide.querySelector<HTMLImageElement>('img');
    if (imgElement) {
      images.push({
        src: imgElement.src,
        alt: imgElement.alt
      });
    }
  });
  
  let currentIndex = 0;
  let currentLightboxIndex = 0;
  const totalSlides = slides.length;

  // Function to update carousel position and thumbnail highlighting
  function updateCarousel(index: number): void {
    if (!carousel) return;
    
    // Update carousel position
    const translateX = -index * 100;
    carousel.style.transform = `translateX(${translateX}%)`;
    
    // Update thumbnail highlighting
    thumbnails.forEach((thumbnail, i) => {
      if (i === index) {
        thumbnail.classList.add('border-primary', 'border-4', 'scale-110');
        thumbnail.classList.remove('border-transparent');
      } else {
        thumbnail.classList.remove('border-primary', 'border-4', 'scale-110');
        thumbnail.classList.add('border-transparent');
      }
    });
    
    currentIndex = index;
  }

  // Initialize first thumbnail as active
  updateCarousel(0);

  // Navigation button functionality
  if (prevBtn) {
    prevBtn.addEventListener('click', () => {
      const newIndex = currentIndex === 0 ? totalSlides - 1 : currentIndex - 1;
      updateCarousel(newIndex);
    });
  }

  if (nextBtn) {
    nextBtn.addEventListener('click', () => {
      const newIndex = currentIndex === totalSlides - 1 ? 0 : currentIndex + 1;
      updateCarousel(newIndex);
    });
  }

  // Thumbnail click functionality
  thumbnails.forEach((thumbnail, index) => {
    thumbnail.addEventListener('click', () => {
      updateCarousel(index);
    });
  });

  // Slide click functionality for lightbox
  slides.forEach((slide, index) => {
    slide.addEventListener('click', () => {
      currentLightboxIndex = index;
      if (lightbox) {
        showLightboxImage(currentLightboxIndex);
        lightbox.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }
    });
  });

  // Touch/Swipe functionality for mobile
  let startX = 0;
  let currentX = 0;
  let isDragging = false;

  if (carousel) {
    carousel.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
      isDragging = true;
    });

    carousel.addEventListener('touchmove', (e) => {
      if (!isDragging) return;
      currentX = e.touches[0].clientX;
    });

    carousel.addEventListener('touchend', () => {
      if (!isDragging) return;
      isDragging = false;
      
      const diffX = startX - currentX;
      const threshold = 50; // Minimum swipe distance
      
      if (Math.abs(diffX) > threshold) {
        if (diffX > 0) {
          // Swipe left - next image
          const newIndex = currentIndex === totalSlides - 1 ? 0 : currentIndex + 1;
          updateCarousel(newIndex);
        } else {
          // Swipe right - previous image
          const newIndex = currentIndex === 0 ? totalSlides - 1 : currentIndex - 1;
          updateCarousel(newIndex);
        }
      }
    });
  }

  // Animation setup using Intersection Observer
  const scrollAnimateElements = document.querySelectorAll('.scroll-animate');
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate');
        observer.unobserve(entry.target);
      }
    });
  }, {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  });
  
  scrollAnimateElements.forEach(element => {
    element.classList.remove('animate');
    observer.observe(element);
  });

  // Lightbox functionality
  if (closeButton) {
    closeButton.addEventListener('click', closeLightbox);
  }
  
  if (lightbox) {
    lightbox.addEventListener('click', (e) => {
      if (e.target === lightbox) closeLightbox();
    });
  }
  
  // Navigate to previous image in lightbox
  if (prevLightboxButton) {
    prevLightboxButton.addEventListener('click', (e) => {
      e.stopPropagation();
      currentLightboxIndex = (currentLightboxIndex - 1 + images.length) % images.length;
      showLightboxImage(currentLightboxIndex);
    });
  }
  
  // Navigate to next image in lightbox
  if (nextLightboxButton) {
    nextLightboxButton.addEventListener('click', (e) => {
      e.stopPropagation();
      currentLightboxIndex = (currentLightboxIndex + 1) % images.length;
      showLightboxImage(currentLightboxIndex);
    });
  }
  
  // Keyboard navigation for carousel and lightbox
  document.addEventListener('keydown', (e) => {
    // Lightbox navigation
    if (lightbox && !lightbox.classList.contains('hidden')) {
      if (e.key === 'Escape') {
        closeLightbox();
      } else if (e.key === 'ArrowLeft') {
        currentLightboxIndex = (currentLightboxIndex - 1 + images.length) % images.length;
        showLightboxImage(currentLightboxIndex);
      } else if (e.key === 'ArrowRight') {
        currentLightboxIndex = (currentLightboxIndex + 1) % images.length;
        showLightboxImage(currentLightboxIndex);
      }
      return;
    }
    
    // Carousel navigation (only when lightbox is closed)
    if (e.key === 'ArrowLeft') {
      const newIndex = currentIndex === 0 ? totalSlides - 1 : currentIndex - 1;
      updateCarousel(newIndex);
    } else if (e.key === 'ArrowRight') {
      const newIndex = currentIndex === totalSlides - 1 ? 0 : currentIndex + 1;
      updateCarousel(newIndex);
    }
  });
  
  // Function to show an image in the lightbox
  function showLightboxImage(index: number): void {
    const image = images[index];
    if (lightboxImage && imageCaption && imageCounter) {
      lightboxImage.src = image.src;
      lightboxImage.alt = image.alt;
      imageCaption.textContent = image.alt;
      imageCounter.textContent = `${index + 1} of ${images.length}`;
    }
  }
  
  // Function to close the lightbox
  function closeLightbox(): void {
    if (lightbox) {
      lightbox.classList.add('hidden');
      document.body.style.overflow = '';
    }
  }
});
</script>