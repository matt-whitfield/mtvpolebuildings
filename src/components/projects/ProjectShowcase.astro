---
// Define the type for project images
interface ProjectImage {
  src: string;
  alt: string;
}

// Define the type for a single featured project
interface FeaturedProject {
  name: string;
  heading: string;
  subHeading: string;
  description: string;
  images: ProjectImage[];
}

// Define the props for the component
interface Props {
  title?: string;
  subtitle?: string;
  project: FeaturedProject;
  sectionClass?: string;
  containerClass?: string;
}

// Default values for optional props
const { 
  title = "Featured Project",
  subtitle = "We're builders, not photographers. We do our best to capture the quality of our work and keep it recent, but we do not regularly update this page.",
  project,
  sectionClass = "project-showcase py-16 gradient-section-1",
  containerClass = "container mx-auto px-4"
} = Astro.props;
---

<!-- Featured Project Showcase -->
<section class={sectionClass}>
  <div class={containerClass}>
    {title && <h2 class="text-3xl md:text-4xl font-bold text-center mb-6 text-gray-800">{title}</h2>}
     {subtitle && <p class="text-lg md:text-lg text-center mb-12 text-gray-800">{subtitle}</h2>}
    
    <!-- 2x2 Grid Layout -->
    <div class="grid lg:grid-cols-2 lg:grid-rows-2 gap-6 lg:gap-8">
      
      <!-- Main Image - Spans both rows on desktop -->
      <div class="project-images order-1 lg:row-span-2">
        <div class="main-image-container h-full">
          <div id="main-featured-image" class="project-gallery-item cursor-pointer rounded overflow-hidden shadow-lg hover:shadow-xl transition-all duration-500 h-full" data-index="0">
            <img 
              id="featured-image"
              src={project.images[0]?.src} 
              alt={project.images[0]?.alt} 
              width="800"
              height="600"
              class="w-full h-[300px] lg:h-full object-cover transition-all duration-500"
              loading="eager"
            />
          </div>
          <p id="featured-image-caption" class="text-center text-gray-600 mt-3 text-sm lg:hidden">{project.images[0]?.alt}</p>
        </div>
      </div>

      <!-- Thumbnail Gallery - Shows second on mobile (after main image), third on desktop -->
      {project.images.length > 1 && (
        <div class="thumbnail-gallery order-2 lg:order-3 flex flex-col justify-start">
          <h4 class="text-lg font-semibold mb-4 text-gray-800">Project Gallery</h4>
          <div class="flex flex-wrap gap-3">
            {project.images.map((image, index) => (
              <div class={`project-thumbnail cursor-pointer rounded overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 border-2 ${index === 0 ? 'border-primary border-4 scale-110' : 'border-transparent'}`} data-index={index}>
                <img 
                  src={image.src} 
                  alt={image.alt} 
                  width="96"
                  height="96"
                  class="w-20 h-20 md:w-24 md:h-24 object-cover hover:scale-105 transition-transform duration-300"
                  loading="lazy"
                />
              </div>
            ))}
          </div>
          <!-- Image caption for desktop - shown here instead of under main image -->
          <p id="featured-image-caption-desktop" class="hidden lg:block text-gray-600 mt-4 text-sm">{project.images[0]?.alt}</p>
        </div>
      )}

      <!-- Project Information - Shows third on mobile (after thumbnails), second on desktop -->
      <div class="project-info order-3 lg:order-2 flex flex-col justify-center">
        <h3 class="text-2xl md:text-3xl font-bold text-gray-800 mb-4">{project.heading}</h3>
        <p class="text-lg text-gray-600 mb-6">{project.subHeading}</p>
        <div class="text-gray-700">
          <p class="text-base leading-relaxed">{project.description}</p>
        </div>
      </div>
      
    </div>
  </div>
</section>

<!-- Lightbox Modal for Project Images -->
<div id="project-lightbox" class="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center hidden">
  <button id="close-project-lightbox" class="absolute top-6 right-6 text-white text-4xl hover:text-gray-300 z-10">&times;</button>
  <button id="prev-project-image" class="absolute left-6 text-white text-4xl hover:text-gray-300 z-10">&larr;</button>
  <button id="next-project-image" class="absolute right-6 text-white text-4xl hover:text-gray-300 z-10">&rarr;</button>
  <div class="max-w-6xl max-h-[90vh] mx-auto px-4">
    <img id="lightbox-project-image" src="" alt="" class="max-h-[90vh] max-w-full mx-auto rounded shadow-2xl">
    <p id="project-image-caption" class="text-white text-center mt-4 text-lg"></p>
    <div class="text-center mt-2">
      <span id="image-counter" class="text-gray-300 text-sm"></span>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      const { LightboxGallery } = await import('/src/utils/gallery-utils.js');
      
      // Get main featured image elements
      const featuredImage = document.getElementById('featured-image') as HTMLImageElement | null;
      const featuredImageCaption = document.getElementById('featured-image-caption');
      const featuredImageCaptionDesktop = document.getElementById('featured-image-caption-desktop');
      const mainFeaturedContainer = document.getElementById('main-featured-image');
      
      // Get thumbnail gallery items
      const thumbnailItems = document.querySelectorAll<HTMLDivElement>('.project-thumbnail');
      
      // Extract images data from thumbnail items
      const images: {src: string; alt: string}[] = [];
      thumbnailItems.forEach(item => {
        const imgElement = item.querySelector<HTMLImageElement>('img');
        if (imgElement) {
          images.push({
            src: imgElement.src,
            alt: imgElement.alt
          });
        }
      });
      
      let currentFeaturedIndex = 0;
      
      // Function to update the main featured image
      function updateFeaturedImage(index: number): void {
        if (featuredImage && images[index]) {
          const image = images[index];
          
          // Add fade-out effect
          featuredImage.style.opacity = '0';
          
          setTimeout(() => {
            featuredImage.src = image.src;
            featuredImage.alt = image.alt;
            
            // Update both captions (mobile and desktop)
            if (featuredImageCaption) {
              featuredImageCaption.textContent = image.alt;
            }
            if (featuredImageCaptionDesktop) {
              featuredImageCaptionDesktop.textContent = image.alt;
            }
            
            // Update the main container's data-index
            if (mainFeaturedContainer) {
              mainFeaturedContainer.setAttribute('data-index', index.toString());
            }
            
            // Add fade-in effect
            featuredImage.style.opacity = '1';
          }, 150);
          
          currentFeaturedIndex = index;
        }
      }
      
      // Function to update thumbnail selection
      function updateThumbnailSelection(activeIndex: number): void {
        thumbnailItems.forEach((item, index) => {
          if (index === activeIndex) {
            item.classList.add('border-primary', 'border-4', 'scale-110');
            item.classList.remove('border-transparent');
          } else {
            item.classList.remove('border-primary', 'border-4', 'scale-110');
            item.classList.add('border-transparent');
          }
        });
      }
      
      // Handle thumbnail clicks to update main featured image (no lightbox)
      thumbnailItems.forEach((item, index) => {
        item.addEventListener('click', () => {
          updateFeaturedImage(index);
          updateThumbnailSelection(index);
        });
      });
      
      // Initialize lightbox for project images
      const lightboxGallery = new LightboxGallery({
        gallerySelector: '.project-gallery-item',
        lightboxId: 'project-lightbox',
        lightboxImageId: 'lightbox-project-image',
        imageCaptionId: 'project-image-caption',
        closeButtonId: 'close-project-lightbox',
        prevButtonId: 'prev-project-image',
        nextButtonId: 'next-project-image',
        images: images,
        customShowImage: (index) => {
          // Custom image display with counter
          const image = images[index];
          const lightboxImage = document.getElementById('lightbox-project-image') as HTMLImageElement;
          const imageCaption = document.getElementById('project-image-caption');
          const imageCounter = document.getElementById('image-counter');
          
          if (lightboxImage && imageCaption) {
            lightboxImage.src = image.src;
            lightboxImage.alt = image.alt;
            imageCaption.textContent = image.alt;
          }
          
          if (imageCounter) {
            imageCounter.textContent = `${index + 1} of ${images.length}`;
          }
        },
        onOpen: (index) => {
          // Use the current featured image index for lightbox
          return currentFeaturedIndex;
        }
      });
      
    } catch (error) {
      console.error('Failed to load gallery utilities:', error);
      // Fallback to basic functionality
      const galleryItems = document.querySelectorAll('.project-gallery-item');
      galleryItems.forEach((item, index) => {
        item.addEventListener('click', () => {
          console.log(`Project gallery item ${index} clicked`);
        });
      });
    }
  });
</script>